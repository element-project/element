
namespace edd {

static const char* nodeName = "edd";
static const char* keyName  = "key";

struct ApiResponseData
{
    bool success;           ///< True if the request was successful
    String license;         ///< Status code of result (not the license key!)
    String itemName;        ///< The product name returned
    String checksum;        ///< Generated MD5 checksum from EDD
    String expires;         ///< Either a date or "lifetime"
    int paymentID;          ///< The payment ID
    String customerName;    ///< The name of the customer
    String customerEmail;   ///< The email of the customer
    int priceID;            ///< The variable price ID for this license
    String key;             ///< The keyfile generated by the server
    
    ApiResponseData()  success (false), paymentID (0), priceID(0) { }
};

static ValueTree decryptValueTree (String hexData, RSAKey rsaPublicKey)
{
    BigInteger val;
    val.parseString (hexData, 16);
    
    RSAKey key (rsaPublicKey);
    jassert (key.isValid());
    
    ValueTree edd;
    
    if (! val.isZero())
    {
        key.applyToValue (val);
        const MemoryBlock mb (val.toMemoryBlock());
        if (CharPointer_UTF8::isValidString (static_cast<const char*> (mb.getData()), (int) mb.getSize()))
            if (ScopedPointer<XmlElement> xml = XmlDocument::parse (mb.toString()))
                edd = ValueTree::fromXml (*xml);
    }
    
    return edd;
}

static ApiResponseData processJSONResponse (const var& json)
{
    ApiResponseData data;
    if (auto* const object = json.getDynamicObject())
    {
        // If you hit one of these, then the server isn't responding correctly,
        // check your EDD settings and make sure required exensions are enabled
        // and configured.
        jassert (object->hasProperty ("success"));
        jassert (object->hasProperty ("license"));
        jassert (object->hasProperty ("key"));
    
        data.success        = (bool) object->getProperty ("success");
        data.license        = object->getProperty("license").toString().trim();
        data.itemName       = object->getProperty("item_name").toString().trim();
        data.checksum       = object->getProperty("checksum").toString().trim();
        data.expires        = object->getProperty("expires").toString().trim();
        data.paymentID      = (int) object->getProperty ("payment_id");
        data.customerName   = object->getProperty("customer_name").toString().trim();
        data.customerEmail  = object->getProperty("customer_email").toString().trim();
        data.priceID        = (int) object->getProperty("price_id");
        
        MemoryOutputStream mo;
        if (Base64::convertFromBase64 (mo, object->getProperty("key").toString()))
        {
            MemoryBlock mb = mo.getMemoryBlock();
            if (CharPointer_UTF8::isValidString ((const char*) mb.getData(), (int) mb.getSize()))
                data.key = String::fromUTF8 ((const char*) mb.getData());
            
        }
        mo.flush();
    }
    
    return data;
}

}

EDDOnlineUnlockStatus::EDDOnlineUnlockStatus() : edd (edd::nodeName) { }
EDDOnlineUnlockStatus::~EDDOnlineUnlockStatus() { }

String EDDOnlineUnlockStatus::readReplyFromWebserver (const String& email, const String& password)
{
    const RSAKey publicKey (getPublicKey());
    URL url (getServerAuthenticationURL());
    StringPairArray params (getQueryParams());
    params.set ("app", getProductID());
    
    if (email.isNotEmpty())
        params.set (URL::isProbablyAnEmailAddress (email) ? "email" : "username", email);
    
    if (password.isNotEmpty())
        params.set ("password", password);
    
    if (getLicenseKey().isNotEmpty())
        params.set ("license", getLicenseKey());
    
    url = url.withParameters (params);
    DBG("[edd] authenticating @ " << url.toString (true));
    
    if (ScopedPointer<XmlElement> xml = url.readEntireXmlStream (true))
    {
        if (auto* keyElement = xml->getChildByName ("KEY"))
        {
            const String keyText (keyElement->getAllSubText().trim());
            edd = edd::decryptValueTree (keyText.fromFirstOccurrenceOf ("#", true, true),
                                         publicKey);
            DBG(edd.toXmlString());
            edd = edd.getChildWithName (edd::nodeName);
        }
        
        return xml->createDocument (String());
    }
    
    return String();
}

void EDDOnlineUnlockStatus::eddRestoreState (const String& state)
{
    const RSAKey publicKey (getPublicKey());
    MemoryBlock mb; mb.fromBase64Encoding (state);
    edd = ValueTree (edd::nodeName);
    
    if (mb.getSize() > 0)
    {
        const ValueTree reg = ValueTree::readFromGZIPData (mb.getData(), mb.getSize());
        const String keyText = reg[edd::keyName].toString().fromFirstOccurrenceOf ("#", true, true);
        edd = edd::decryptValueTree (keyText, publicKey);
        edd = edd.getChildWithName (edd::nodeName);
    }
    
    if (! edd.isValid() || !edd.hasType (edd::nodeName))
        edd = ValueTree (edd::nodeName);
}

OnlineUnlockStatus::UnlockResult EDDOnlineUnlockStatus::activateLicense (const String& license,
                                                                         const String& email,
                                                                         const String& password)
{
    OnlineUnlockStatus::UnlockResult r;

    URL url (getApiEndPoint());
    url = url.withParameter ("edd_action", "activate_license")
             .withParameter ("item_id", getProductID())
             .withParameter ("license", license)
             .withParameter ("url", getLocalMachineIDs()[0]);
    
    DBG("connecting: " << url.toString(true));

    var response;
    Result result (JSON::parse (url.readEntireTextStream(), response));
    if (result.failed())
    {
        r.errorMessage = "Currupt response from server.";
        r.succeeded = false;
        return r;
    }
    
    DBG ("JSON Response:");
    DBG (JSON::toString (response, false));
    
    const edd::ApiResponseData data (edd::processJSONResponse (response));
    
    return r;
}

OnlineUnlockStatus::UnlockResult EDDOnlineUnlockStatus::deactivateLicense (const String& license)
{
    OnlineUnlockStatus::UnlockResult r;
    r.succeeded = false;
    
    const URL url (getApiEndPoint()
             .withParameter ("edd_action", "deactivate_license")
             .withParameter ("item_id", "15")
             .withParameter ("license", license)
             .withParameter ("url", getLocalMachineIDs()[0]));

    DBG("connecting: " << url.toString (true));
    
    var response;
    Result result (JSON::parse (url.readEntireTextStream(), response));
    if (result.failed())
    {
        r.errorMessage = "Ill formatted response from server.";
        r.succeeded = false;
        return r;
    }
    
    DBG ("JSON Response:");
    DBG (JSON::toString (response, false));
    
    const edd::ApiResponseData data (edd::processJSONResponse (response));
    if (data.success)
        r.succeeded = applyKeyFile (data.key);
    
    return r;
}

OnlineUnlockStatus::UnlockResult EDDOnlineUnlockStatus::checkLicense (const String& license)
{
    OnlineUnlockStatus::UnlockResult r;
    r.succeeded = false;
    return r;
}
